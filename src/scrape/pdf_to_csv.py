from typing import List

import openai
from PyPDF2 import PdfReader


def extract_pdf_text(filepath: str) -> List[str]:
    """
    Extracts text from each page of a PDF file using PyPDF2 and returns it as a list of strings.

    Parameters:
    filepath (str): The file path or URL of the PDF file to extract text from.

    Returns:
    List[str]: A list of strings containing the extracted text from each page of the PDF.
    """
    pdf_file = open(filepath, "rb")
    status = True
    try:
        pdf_reader = PdfReader(pdf_file)
        pages = len(pdf_reader.pages)

        text_list = []
        for page in range(pages):
            pdf_page = pdf_reader.pages[page]
            text = pdf_page.extract_text()
            text_list.append(text)
    except Exception as e:
        status = False

    if status == False:
        try:
            text_list = []
            for i in PdfReader(open(name, "rb")).pages:
                text_list.append(i.extract_text())
        except Exception as e:
            text_list = "Failed."
    else:
        print(f"Task status: {text_list}")

    pdf_file.close()
    return text_list


def get_questions(context: str) -> str:
    """
    Given a text context, generates a list of questions using OpenAI's GPT-3 API.

    Args:
    - context: A string representing the context for which questions should be generated.

    Returns:
    - A string containing the question generated by the API.
    """

    try:
        response = openai.Completion.create(
            engine="davinci-instruct-beta-v3",
            prompt=f"Write questions based on the text below\n\nText: {context}\n\nQuestions:\n1.",
            temperature=0,
            max_tokens=200,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["\n\n"],
        )
        # Extract question text from the response
        question_text = response["choices"][0]["text"]
        return question_text
    except:
        # Return an empty string if there was an error
        return ""


def get_answers(row: pd.DataFrame) -> str:
    """
    Given a dataframe row containing context and questions, generates an answer using OpenAI's GPT-3 API.

    Args:
    - row: A pandas dataframe row containing 'context' and 'questions' columns.

    Returns:
    - A string containing the answer generated by the API.
    """

    try:
        response = openai.Completion.create(
            engine="davinci-instruct-beta-v3",
            prompt=f"Write answer (limit to 1 paragraph) based on the text below\n\nText: {row.context}\n\nQuestions:\n{row.questions}\n\nAnswers:\n1.",
            temperature=0,
            max_tokens=500,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
        )
        # Extract answer text from the response
        answer_text = response["choices"][0]["text"]
        return answer_text
    except Exception as e:
        # Print the error message and return an empty string if there was an error
        print(e)
        return ""
